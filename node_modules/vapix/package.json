{
  "name": "vapix",
  "version": "0.5.0",
  "author": {
    "name": "Brandon Cheng",
    "email": "gluxon@gluxon.com"
  },
  "description": "VAPIX is Axis’ own open API, implemented in Node.js ",
  "repository": {
    "type": "git",
    "url": "https://github.com/gluxon/node-vapix.git"
  },
  "main": "./lib/vapix",
  "dependencies": {
    "mjpeg-consumer": "0.2.0"
  },
  "license": "MIT",
  "engines": {
    "node": ">=0.8"
  },
  "readme": "# node-vapix\n\nnode-vapix is a Node.js implementation of VAPIX®, an HTTP-based API to\ninterface with Axis cameras.\n\n## What is VAPIX?\n\n> VAPIX® is Axis’ own open API (Application Programming Interface). It\n> makes Axis network video solutions costefficient, flexible, scalable,\n> future-proof and easy to integrate with other systems.\n\n> All Axis network cameras and video servers have an HTTP-based\n> application programming interface. VAPIX® provides functionality for\n> requesting images, controlling network camera functions (PTZ, relays\n> etc.) and setting/retrieving internal parameter values. The purpose\n> of the API is to make it easier for developers to build applications\n> that support Axis video products.\n\nFor more details, and the source of the above quote, see Axis' page on\nthe API.\n\n[http://www.axis.com/techsup/cam_servers/dev/cam_http_api_index.php](http://www.axis.com/techsup/cam_servers/dev/cam_http_api_index.php)\n\n## Install and usage\n\nInstall from npm:\n\n\tnpm install vapix\n\nAnd to use...\n\n\tvar vapix = require('vapix');\n\n## Methods\n\n### camera.createVideoSream(options)\n\nReturns a video stream. Each data event is a full frame. Parameters to\nbe set as an object in `options` are outlined in the VAPIX®\n[Video Streaming API](http://www.axis.com/files/manuals/vapix_video_streaming_48700_en_1208.pdf)\ndocument.\n\n\tvar options = {\n\t\tresolution: '640x480',\n\t\tcompression: 25,\n\t\tduration: 10,\n\t\tfps: 30\n\t}\n\n\tvar mjpg = camera.createVideoStream(options);\n\n\tmjpg.on('data', function(data) {\n\t\t// do something with the frame here\n\t});\n\n\tmjpg.on('end', function() {\n\t\tconsole.log('Finished.');\n\t});\n\n### camera.requestImage([options], callback)\n\nGrab an image. Parameters to be set as an object in `options` are\noutlined in the VAPIX® [Video Streaming API](http://www.axis.com/files/manuals/vapix_video_streaming_48700_en_1208.pdf)\ndocument.\n\n\tvar fs = require('fs');\n\n\tvar options = {\n\t\tresolution: '640x480',\n\t\tcompression: 30,\n\t\trotation: 0\n\t}\n\n\tcamera.requestImage(options, function(err, data) {\n\t\tif (err) throw err;\n\n\t\tfs.writeFile(\"out.jpg\", data, function(err) {\n\t\t\tif (err) throw err;\n\t\t});\n\t});\n\n### camera.getImageResolution()\n\nReturns an object containing the `width` and `height` of the camera's image\nresolution setting.\n\n\tcamera.getImageResolution(function(err, data) {\n\t\tif (err) throw err;\n\n\t\tconsole.log(data); // { width: '640', height: '480' }\n\t});\n\n## License\n\nnode-vapix is written under the [MIT License](http://opensource.org/licenses/MIT)\n\n## Status\n\n#### 0.4\n- More API documentation\n- requestImage() now supports optional options argument\n- Private method request() now takes 1 path string instead of as an object\n\n#### 0.3\n- Added createVideoStream()\n- Created method for generating HTTP GET queries\n\n#### 0.2\n\n- Added getImageResolution()\n- Reworked two request methods to use a common request template\n\n#### 0.1\n2-22-13: requestImage() now complete. Correctly throws error.  \n1-22-13: Basic image download refined, no longer need to concatenate\nchunks on frontend. Moving from alpha status to beta.  \n1-21-13: Only a basic image download works.  \n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/gluxon/node-vapix/issues"
  },
  "_id": "vapix@0.5.0",
  "_from": "vapix@>=0.0.0"
}
